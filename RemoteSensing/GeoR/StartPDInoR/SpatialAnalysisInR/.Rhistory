names(img) <- c("B02", "B03", "B04", "B05", "B06", "B07", "B8A", "B11", "B12")
names(img)
plot(img$B8A)
plot(img$B02)
plot(img$B12)
plot(img$B11)
img <- stack("/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagem_Cortada/imagem_cortada.tif")
names(img)
names(img) <- c("B02", "B03", "B04", "B05", "B06", "B07", "B8A", "B11", "B12")
plot(img$B12)
plot(img$B8A)
#NDVI
NDVI <- (img$B8A - img$B04)/(img$B8A + img$B04)
#Plot do indice
plot(NDVI)
#NDVI
NDVI <- (img$B12 - img$B04)/(img$B12 + img$B04)
#Plot do indice
plot(NDVI)
#carregando as imagens
arquivos <- list.files(path = "/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagens_sentinel/Imagem_Bruta/",
pattern="_B", full.names = T)
img <- stack(arquivos)
#Carregar o Shapefile
botucatu <- readOGR("/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Shapefiles_classificacao/MunicipioBotucatu/Botucatu.shp")
#Transfomando coordenada de longlat para utm
botucatu_utm <- spTransform(x = botucatu, CRSobj = crs(img)) #ou colocar: "+proj=utm +zone=22 +south +datum=WGS84 +units=m +no_defs"
# Usando a funcao mascara
botucatu_mask <- mask(x = img, mask = botucatu_utm)
#Usando a funcao crop
botucatu_crop <- crop(botucatu_mask, botucatu_utm)
# Usando a funcao mascara
botucatu_mask <- mask(x = img, mask = botucatu_utm)
# Usando a funcao mascara
botucatu_mask <- mask(x = img, mask = botucatu_utm)
#Usando a funcao crop
botucatu_crop <- crop(botucatu_mask, botucatu_utm)
names(botucatu_crop)
#stack nao carrega na memoria ran
img <- stack("/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagem_Cortada/imagem_cortada.tif") #ler todas as bandas
#modifica o nome das bandas
names(img) <- c("B02", "B03", "B04", "B05", "B06", "B07", "B11", "B12", "B8A")
plot(img$B8A)
#NDVI
NDVI <- (img$B12 - img$B04)/(img$B12 + img$B04)
#Plot do indice
plot(NDVI)
#NDVI
NDVI <- (img$B8A - img$B04)/(img$B8A + img$B04)
#Plot do indice
plot(NDVI)
# Plot com cor verdadeira
arquivos <- list.files(path = "/home/wesley/Documentos/ImagensSatelites/AnaliseCabrobo/Imagem_Bruta/",
pattern="_B", full.names = T)
img <- stack(arquivos)
municipios <- readOGR("/home/wesley/Documentos/ImagensSatelites/AnaliseCabrobo/MunicipiosPE/PE_Municipios_2021.shp")
#transformar para um data frame
pe_dados <- slot(object=municipios, name="data");
#encontrar codigo do municipio
cod_cabrobo <- pe_dados[pe_dados$NM_MUN == "CabrobÃ³",]$CD_MUN
#Separar Shape de Cabrobo
cabrobo <- municipios[municipios$CD_MUN == cod_cabrobo,]
#Transfomando coordenada de longlat para utm
cabrobo_utm <- spTransform(x = cabrobo, CRSobj = crs(img)) #ou colocar: "+proj=utm +zone=22 +south +datum=WGS84 +units=m +no_defs"
# Usando a funcao mascara
cabrobo_mask <- mask(x = img, mask = cabrobo_utm)
#Usando a funcao crop
cabrobo_crop <- crop(cabrobo_mask, cabrobo_utm)
names(cabrobo_crop)
#stack nao carrega na memoria ran
img <- stack("/home/wesley/Documentos/ImagensSatelites/AnaliseCabrobo/Imagem_Cabrobo/imagem_cortada_cabrobo.tif") #ler todas as bandas
#modifica o nome das bandas
names(img) <- c("B02", "B03", "B04", "B05", "B06", "B07", "B11", "B12", "B8A")
#NDVI
NDVI <- (img$B8A - img$B04)/(img$B8A + img$B04)
#Plot do indice
plot(NDVI)
#stack nao carrega na memoria ran
img <- stack("/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagem_Cortada/imagem_cortada.tif") #ler todas as bandas
#modifica o nome das bandas
names(img) <- c("B02", "B03", "B04", "B05", "B06", "B07", "B11", "B12", "B8A")
#NDVI
NDVI <- (img$B8A - img$B04)/(img$B8A + img$B04)
#Plot do indice
plot(NDVI)
img$NDVI <- NDVI
#Remover da memoria
rm(NDVI)
#RS: Simple Ratio
img$Simple_ratio <- img$B8A/img$B04
#Plot do indice
plot(img$Simple_ratio)
#EVI: indice de vegetacao melhorado
img$EVI <- (2.5 * (img$B8A - img$B04)/10000)/(img$B8A/10000 + 6 * img$B04/10000 - 7.5 * img$B02/10000 + 1)
#Plot do indice
plot(img$EVI)
#NDWI: indice da diferenca normalizada
img$NDWI <- (img$B03 - img$B12)/(img$B03 + img$B12)
#Plot do indice
plot(img$NDWI)
# Fazendo grafico de comparacao entre os 4 indices
par(mfrow= c(2,2))
#Em escala de cinza
plot(img$NDVI, col = gray(0:100/100), main = "NDVI")
plot(img$Simple_ratio, col = gray(0:100/100), main = "Simple Ratio")
plot(img$EVI, col = gray(0:100/100), main = "EVI")
plot(img$NDWI, col = gray(0:100/100), main = "NDWI")
#Salvando o arquivo TIF
writeRaster(x = img, filename = "/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagem_Cortada/imagem_cortada_com_indices.tif")
#Salvando os noems das bandas
write.csv(names(img), "/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagem_Cortada/nomes_bandas.csv")
#stack nao carrega na memoria ran
img <- stack("/home/wesley/Documentos/ImagensSatelites/AnaliseCabrobo/Imagem_Cabrobo/imagem_cortada_cabrobo.tif") #ler todas as bandas
#modifica o nome das bandas
names(img) <- c("B02", "B03", "B04", "B05", "B06", "B07", "B11", "B12", "B8A")
#NDVI
NDVI <- (img$B8A - img$B04)/(img$B8A + img$B04)
#EVI: indice de vegetacao melhorado
img$EVI <- (2.5 * (img$B8A - img$B04)/10000)/(img$B8A/10000 + 6 * img$B04/10000 - 7.5 * img$B02/10000 + 1)
#NDWI: indice da diferenca normalizada
img$NDWI <- (img$B03 - img$B12)/(img$B03 + img$B12)
#RS: Simple Ratio
img$Simple_ratio <- img$B8A/img$B04
# Fazendo grafico de comparacao entre os 4 indices
par(mfrow= c(2,2))
#Em escala de cinza
plot(img$NDVI, col = gray(0:100/100), main = "NDVI")
# Fazendo grafico de comparacao entre os 4 indices
par(mfrow= c(2,2))
#Em escala de cinza
plot(img$NDVI, col = gray(0:100/100), main = "NDVI")
img$NDVI
#stack nao carrega na memoria ran
img <- stack("/home/wesley/Documentos/ImagensSatelites/AnaliseCabrobo/Imagem_Cabrobo/imagem_cortada_cabrobo.tif") #ler todas as bandas
#modifica o nome das bandas
names(img) <- c("B02", "B03", "B04", "B05", "B06", "B07", "B11", "B12", "B8A")
#NDVI
NDVI <- (img$B8A - img$B04)/(img$B8A + img$B04)
img$NDVI <- NDVI
#RS: Simple Ratio
img$Simple_ratio <- img$B8A/img$B04
#EVI: indice de vegetacao melhorado
img$EVI <- (2.5 * (img$B8A - img$B04)/10000)/(img$B8A/10000 + 6 * img$B04/10000 - 7.5 * img$B02/10000 + 1)
#NDWI: indice da diferenca normalizada
img$NDWI <- (img$B03 - img$B12)/(img$B03 + img$B12)
# Fazendo grafico de comparacao entre os 4 indices
par(mfrow= c(2,2))
#Em escala de cinza
plot(img$NDVI, col = gray(0:100/100), main = "NDVI")
plot(img$Simple_ratio, col = gray(0:100/100), main = "Simple Ratio")
plot(img$EVI, col = gray(0:100/100), main = "EVI")
plot(img$NDWI, col = gray(0:100/100), main = "NDWI")
#Salvando o arquivo TIF
writeRaster(x = img, filename = "/home/wesley/Documentos/ImagensSatelites/AnaliseCabrobo/Imagem_Cabrobo/imagem_cabrobo_com_indices.tif")
#Salvando os noems das bandas
write.csv(names(img), "/home/wesley/Documentos/ImagensSatelites/AnaliseCabrobo/Imagem_Cabrobo/nomes_bandas.csv")
#Carregar o Shapefile
botucatu <- readOGR("/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Shapefiles_classificacao/MunicipioBotucatu/Botucatu.shp")
# Pacotes
library(raster)
library(rgdal)
install.packages("rgeos")
library(rgeos)
botucatu <- stack("/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagem_Cortada/imagem_cortada_com_indices.tif")
names(botucatu)
bandas <- read.csv("/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagem_Cortada/nomes_bandas.csv", h = T)
names(bandas)
bandas
names(botucatu) <- bandas[,2]
names(botucatu)
amostras <- readOGR("/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagens_sentinel/Amostras/Amostras.shp")
View(data.frame(amostras))
unidos_shp <- gUnaryUnion(spgeom = amostras, id = amostras$Classe)
unidos_shp
atributos <- extract(x = botucatu, y = unidos_shp)
atributos
names(unidos_shp)
# Criar um dataframe unico para cada uma das classes com as variaveis que nos temos
# Separar os elementos das listas em dataframes
Agricola <- data.frame(Classe = "Agricola", atributos[[1]])
Agricultura <- data.frame(Classe = "Agricultura", atributos[[1]])
Agricultura <- data.frame(Classe = "Agricultura", atributos[[2]])
Agua <- data.frame(Classe = "Agua", atributos[[3]])
Area_urbana <- data.frame(Classe = "Area_urbana", atributos[[4]])
Eucalipto <- data.frame(Classe = "Eucalipto", atributos[[5]])
Floresta <- data.frame(Classe = "Floresta", atributos[[6]])
Pastagem <- data.frame(Classe = "Pastagem", atributos[[7]])
Solo_exposto <- data.frame(Classe = "Solo_exposto", atributos[[8]])
amostra_geral <- rbind(Agricola, Agricultura, Agua, Area_urbana, Eucalipto, Floresta, Pastagem, Solo_exposto)
View(amostra_geral)
#Salvando a amostra geral
write.csv(amostra_geral, "/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagens_sentinel/Amostras/Amostra_classificacao.csv", row.names = F)
# Extrair para amostras de campo. Criar um novo dataframe para nossa analise
# Extrai uma lista com 8 elementos correspondentes a cada classe
atributos <- raster::extract(x = botucatu, y = unidos_shp)
# Criar um dataframe unico para cada uma das classes com as variaveis que nos temos
# Separar os elementos das listas em dataframes
Agricola <- data.frame(Classe = "Agricola", atributos[[1]])
Agricultura <- data.frame(Classe = "Agricultura", atributos[[2]])
Agua <- data.frame(Classe = "Agua", atributos[[3]])
Area_urbana <- data.frame(Classe = "Area_urbana", atributos[[4]])
Eucalipto <- data.frame(Classe = "Eucalipto", atributos[[5]])
Floresta <- data.frame(Classe = "Floresta", atributos[[6]])
Pastagem <- data.frame(Classe = "Pastagem", atributos[[7]])
Solo_exposto <- data.frame(Classe = "Solo_exposto", atributos[[8]])
amostra_geral <- rbind(Agricola, Agricultura, Agua, Area_urbana, Eucalipto, Floresta, Pastagem, Solo_exposto)
#Salvando a amostra geral
write.csv(amostra_geral, "/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagens_sentinel/Amostras/Amostra_classificacao.csv", row.names = F)
library(tidyverse)
amostras <- read.csv("/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagens_sentinel/Amostras/Amostra_classificacao.csv", h = T)
#Agrupar valores pela classe
media_reflec <- amostras %>%
group_by(Classe) %>%
summarise_each()
#Agrupar valores pela classe
media_reflec <- amostras %>%
group_by(Classe) %>%
summarise_each(mean)
media_reflec1 <- amostras %>%
group_by(Classe) %>%
across(mean)
media_reflec
media_reflec
media_reflec
reflec_t <- t(media_reflec[,2:10])
cores <- c("red", "yellow", "blue", "pink", "green", "darkgren", "orange"," brown")
#Comprimento de onda
wave_length = c(490, 560, 660, 705, 770, 1600, 2200, 850)
matplot(x = wave_length, y = reflec_t, type = "l", lwd = "2", lty = 1,
xlab = "Comprimento de ondas (nm)", ylab = "ReflectÃ¢ncia x10000",
ylim = c(0, 8000))
reflec_t
#Comprimento de onda
wave_length = c(490, 560, 660, 705, 740, 770, 1600, 2200, 850)
matplot(x = wave_length, y = reflec_t, type = "l", lwd = "2", lty = 1,
xlab = "Comprimento de ondas (nm)", ylab = "ReflectÃ¢ncia x10000",
ylim = c(0, 8000))
matplot(x = wave_length, y = reflec_t, type = "l", lwd = "2", lty = 1,
xlab = "Comprimento de ondas (nm)", ylab = "ReflectÃ¢ncia x10000",
ylim = c(0, 8000), col = cores)
cores <- c("red", "yellow", "blue", "pink", "green", "darkgreen", "orange"," brown")
matplot(x = wave_length, y = reflec_t, type = "l", lwd = "2", lty = 1,
xlab = "Comprimento de ondas (nm)", ylab = "ReflectÃ¢ncia x10000",
ylim = c(0, 8000), col = cores)
#Comprimento de onda
wave_length = c(490, 560, 660, 705, 740, 770, 1600, 2200, 850)
matplot(x = wave_length, y = reflec_t, type = "l", lwd = "2", lty = 1,
xlab = "Comprimento de ondas (nm)", ylab = "ReflectÃ¢ncia x10000",
ylim = c(0, 8000), col = cores)
matplot(x = wave_length, y = reflec_t, type = "l", lwd = "2", lty = 1,
xlab = "Comprimento de ondas (nm)", ylab = "ReflectÃ¢ncia x10000",
ylim = c(0, 8000), col = cores)
plot.new()
matplot(x = wave_length, y = reflec_t, type = "l", lwd = "2", lty = 1,
xlab = "Comprimento de ondas (nm)", ylab = "ReflectÃ¢ncia x10000",
ylim = c(0, 8000), col = cores)
media_reflec
media_reflec[, 1]
media_reflec[, c(1, 2, 3)]
media_reflec[, c(1:5)]
media_reflec[, c(1:7)]
media_reflec[, c(1:7, 11)]
media_reflec[, c(1:7, 12)]
media_reflec[, c(1:7, 10, 8, 9, 11:14)]
#Mudar posicao da  coluna banda 8
media_reflec <- media_reflec[, c(1:7, 10, 8, 9, 11:14)]
reflec_t <- t(media_reflec[,2:10])
cores <- c("red", "yellow", "blue", "pink", "green", "darkgreen", "orange"," brown")
#Comprimento de onda
wave_length = c(490, 560, 660, 705, 740, 770, 1600, 2200, 850)
matplot(x = wave_length, y = reflec_t, type = "l", lwd = "2", lty = 1,
xlab = "Comprimento de ondas (nm)", ylab = "ReflectÃ¢ncia x10000",
ylim = c(0, 8000), col = cores)
reflec_t
cores <- c("red", "yellow", "blue", "pink", "green", "darkgreen", "orange"," brown")
#Comprimento de onda
wave_length = c(490, 560, 660, 705, 740, 770, 850, 1600, 2200)
matplot(x = wave_length, y = reflec_t, type = "l", lwd = "2", lty = 1,
xlab = "Comprimento de ondas (nm)", ylab = "ReflectÃ¢ncia x10000",
ylim = c(0, 8000), col = cores)
legend("top", legend = media_reflec$Classe, lty = 1, col = cores, ncol = 3)
legend("top", legend = media_reflec$Classe, lty = 1, col = cores, ncol = 3, lwd = 2)
library(reshape2)
dados_melt <- melt(amostras)
dados_melt
ggplot(data = dados_melt, aes(x = Classe, y = value, fill = Classe)) +
geom_boxplot()
ggplot(data = dados_melt, aes(x = Classe, y = value, fill = Classe)) +
geom_boxplot() +
facet_wrap(~variable, scale = 'free')
ggplot(data = dados_melt, aes(x = Classe, y = value, fill = Classe)) +
geom_boxplot() +
facet_wrap(~variable, scale = 'free') +
theme(panel.grid.major = element_line((colour = "#d3d3dd3")),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
text = element_text(family = "serif"),
axis.title = element_text(face = "bold", size = 12),
axis.text.x = element_text(colour = "white"),
axis.text.y = element_text(size = 12),
axis.line = element_line(size = 1, colour = "black")
) +
theme(plot.margin = unit(c(1, 1, 1), "lines"))
ggplot(data = dados_melt, aes(x = Classe, y = value, fill = Classe)) +
geom_boxplot() +
facet_wrap(~variable, scale = 'free') +
theme(panel.grid.major = element_line((colour = "#d3d3dd3")),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
text = element_text(family = "serif"),
axis.title = element_text(face = "bold", size = 12),
axis.text.x = element_text(colour = "white"),
axis.text.y = element_text(size = 12),
axis.line = element_line(size = 1, colour = "black")
) +
theme(plot.margin = unit(c(1, 1, 1, 1), "lines"))
ggplot(data = dados_melt, aes(x = Classe, y = value, fill = Classe)) +
geom_boxplot() +
facet_wrap(~variable, scale = 'free') +
theme(panel.grid.major = element_line(colour = "#d3d3dd3"),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
text = element_text(family = "serif"),
axis.title = element_text(face = "bold", size = 12),
axis.text.x = element_text(colour = "white"),
axis.text.y = element_text(size = 12),
axis.line = element_line(size = 1, colour = "black")
) +
theme(plot.margin = unit(c(1, 1, 1, 1), "lines"))
ggplot(data = dados_melt, aes(x = Classe, y = value, fill = Classe)) +
geom_boxplot() +
facet_wrap(~variable, scale = 'free') +
theme(panel.grid.major = element_line(colour = "#d3d3d3"),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
text = element_text(family = "serif"),
axis.title = element_text(face = "bold", size = 12),
axis.text.x = element_text(colour = "white"),
axis.text.y = element_text(size = 12),
axis.line = element_line(size = 1, colour = "black")
) +
theme(plot.margin = unit(c(1, 1, 1, 1), "lines"))
ggplot(data = dados_melt, aes(x = Classe, y = value, fill = Classe)) +
geom_boxplot() +
facet_wrap(~variable, scale = 'free') +
theme(panel.grid.major = element_line(colour = "#d3d3d3"),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
text = element_text(family = "serif"),
axis.title = element_text(face = "bold", size = 12),
axis.text.x = element_text(colour = "white"),
axis.text.y = element_text(size = 12),
axis.line = element_line(size = 1, colour = "black")
) +
theme(plot.margin = unit(c(1, 1, 1, 1, 1), "lines"))
ggplot(data = dados_melt, aes(x = Classe, y = value, fill = Classe)) +
geom_boxplot() +
facet_wrap(~variable, scale = 'free') +
theme(panel.grid.major = element_line(colour = "#d3d3d3"),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
text = element_text(family = "serif"),
axis.title = element_text(face = "bold", size = 12),
axis.text.x = element_text(colour = "white"),
axis.text.y = element_text(size = 12),
axis.line = element_line(size = 1, colour = "black")
) +
theme(plot.margin = unit(c(1, 1, 1, 1), "lines"))
ggplot(data = dados_melt, aes(x = Classe, y = value, fill = Classe)) +
geom_boxplot() +
facet_wrap(~variable, scale = 'free') +
theme(panel.grid.major = element_line(colour = "#d3d3d3"),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
text = element_text(family = "serif"),
axis.title = element_text(face = "bold", size = 12),
axis.text.x = element_text(colour = "white"),
axis.text.y = element_text(size = 12),
axis.line = element_line(size = 1, colour = "black")
) +
theme(plot.margin = unit(c(1, 1, 1), "lines"))
ggplot(data = dados_melt, aes(x = Classe, y = value, fill = Classe)) +
geom_boxplot() +
facet_wrap(~variable, scale = 'free') +
theme(panel.grid.major = element_line(colour = "#d3d3d3"),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
text = element_text(family = "serif"),
axis.title = element_text(face = "bold", size = 12),
axis.text.x = element_text(colour = "white"),
axis.text.y = element_text(size = 12),
axis.line = element_line(size = 1, colour = "black")
) +
theme(plot.margin = unit(c(1, 1, 1, 1), "lines"))
library(dplyr)
library(randomForest)
library(e1071)
library(caret)
library(caTools)
dados <- read.csv("/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagens_sentinel/Amostras/Amostra_classificacao.csv", h = T)
dados <- read.csv("/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagens_sentinel/Amostras/Amostra_classificacao.csv", h = T)
str(dados)
# Transform class in factor
dados$Classe <- as.factor(dados$Classe)
treino <- sample.split(dados$Classe, SplitRatio = .7)   #Separa de acordo com as proporcoes das classses
amostras_train <- sample.split(dados$Classe, SplitRatio = .7)   #Separa de acordo com as proporcoes das classses
# Train
treino <- dados[amostras_train, ]
# Validacao
validacao  <- dados[amostras_train == F, ]
# Amostras q serao selecionadas
set.seed(1234)    #Semente geradora de numeros aleatorios
amostras_train <- sample.split(dados$Classe, SplitRatio = .7)   #Separa de acordo com as proporcoes das classses
# Train
treino <- dados[amostras_train, ]
# Validacao
validacao  <- dados[amostras_train == F, ]
## Machine Learning: Random Forest
set.seed(1234)
str(dados)
rf_model <- randomForest(Classe ~ ., data = treino, ntree = 100, mtry = 5, importance = T)
# Importancia das variaveis
importance(rf_model)
# Importancia das variaveis
varImpPlot(rf_model)
# Random
set.seed(1234)
rf_model <- randomForest(Classe ~ ., data = treino, ntree = 100, mtry = 5, importance = T)
# Importancia das variaveis
varImpPlot(rf_model)
set.seed(1234)
svm_model <- svm(Classe ~., kernel = "polynomial", data = treino)
pred_rf <- predict(rf_model, validacao)
pred_svm <- predict(svm_model, validacao)
cm_rf <- confusionMatrix(data = pred_rf, reference = validacao$Classe)
cm_svm <- confusionMatrix(data = pred_svm, reference = validacao$Classe)
print(cm_rf)
print(cm_svm)
saveRDS(object = rf_model, file = "/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagens_sentinel/Amostras/random_forest_model.rds")
saveRDS(object = svm_model, file = "/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagens_sentinel/Amostras/suport_vector_machine_model.rds")
library(randomForest)
library(e1071)
library(caret)
library(raster)
rf_model <- readRDS("/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagens_sentinel/Amostras/random_forest_model.rds")
svm_model <- readRDS("/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagens_sentinel/Amostras/suport_vector_machine_model.rds")
img = stack("/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagem_Cortada/imagem_cortada_com_indices.tif")
bandas <- read.csv("/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagem_Cortada/nomes_bandas.csv")
names(img) <- bandas[, 2]
names(img)
rf_raster <- predict(img, rf_model)
#Support vector machine
svm_raster <- predict(img, svm_model)
cores <- c("red", "yellow", "blue", "pink", "green", "darkgreen", "orange"," brown")
classes <- c("Agricola", "Agricultura", "Agua", "Area_urbana", "Eucalipto", "Floresta", "Pastagem", "Solo_exposto")
jpeg(filename = "/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagem_Cortada/random_forest_classification.jpeg",
width = 15, height = 15, res = 450,  units = "cm")
library(prettymapr)
plot(rf_raster, legend = F, col = cores, main = "Random Forest Classification \n Botucatu-SP",
cex.axis = 1.5, cex.main = 1.5)
legend("topleft", legend = classes, fill = cores, border = F, cex = 2)
plot(rf_raster, legend = F, col = cores, main = "Random Forest Classification \n Botucatu-SP",
cex.axis = 1.5, cex.main = 1.5)
legend("topleft", legend = classes, fill = cores, border = F, cex = 1)
legend("topleft", legend = classes, fill = cores, border = F, cex = 1.5)
legend("topleft", legend = classes, fill = cores, border = F, cex = 1.3)
plot(rf_raster, legend = F, col = cores, main = "Random Forest Classification \n Botucatu-SP",
cex.axis = 1.5, cex.main = 1.5)
legend("topleft", legend = classes, fill = cores, border = F, cex = 1.3)
classes <- c("AgrÃ­cola", "Agricultura", "Ãgua", "Area Urbana", "Eucalipto", "Floresta", "Pastagem", "Solo Exposto")
plot(rf_raster, legend = F, col = cores, main = "Random Forest Classification \n Botucatu-SP",
cex.axis = 1.5, cex.main = 1.5)
legend("topleft", legend = classes, fill = cores, border = F, cex = 1.3)
addscalebar()
addnortharrow(cols = c("black", "black"), scale = 0.755)
pdf(filename = "/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagem_Cortada/random_forest_classification.jpeg",
width = 15, height = 15, res = 450,  units = "cm")
pdf(filename = "/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagem_Cortada/random_forest_classification.jpeg",
width = 15, height = 15)
pdf(file = "/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagem_Cortada/random_forest_classification.jpeg",
width = 15, height = 15)
plot(rf_raster, legend = F, col = cores, main = "Random Forest Classification \n Botucatu-SP",
cex.axis = 1.5, cex.main = 1.5)
legend("topleft", legend = classes, fill = cores, border = F, cex = 1.3)
addscalebar()
addnortharrow(cols = c("black", "black"), scale = 0.755)
dev.off()
pdf(file = "/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagem_Cortada/random_forest_classification.pdf",
width = 15, height = 15)
plot(rf_raster, legend = F, col = cores, main = "Random Forest Classification \n Botucatu-SP",
cex.axis = 1.5, cex.main = 1.5)
legend("topleft", legend = classes, fill = cores, border = F, cex = 1.3)
addscalebar()
addnortharrow(cols = c("black", "black"), scale = 0.755)
dev.off()
plot(rf_raster, legend = F, col = cores, main = "Random Forest Classification \n Botucatu-SP",
cex.axis = 1.5, cex.main = 1.5)
legend("topleft", legend = classes, fill = cores, border = F, cex = 1.3)
addscalebar()
addnortharrow(cols = c("black", "black"), scale = 0.755)
writeRaster(rf_raster, "/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagem_Cortada/imagem_classificada_radom_forest.tif")
writeRaster(rf_raster, "/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagem_Cortada/imagem_classificada_radom_forest.tif")
writeRaster(rf_raster, "/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagem_Cortada/imagem_classificada_radom_forest.tif")
writeRaster(svm_raster, "/home/wesley/Documentos/ImagensSatelites/MaterialCursoStartPDI/Dados_curso/Imagem_Cortada/imagem_classificada_support_vector.tif")
